name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Auto-increment patch version and generate version info
      run: |
        BUILD_NUMBER=${{ github.run_number }}
        COMMIT_HASH=$(git rev-parse HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        BRANCH=${GITHUB_REF#refs/heads/}
        
        # Auto-increment patch version based on build number
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Extract major.minor from current version, use build number as patch
        MAJOR_MINOR=$(echo $CURRENT_VERSION | cut -d. -f1-2)
        NEW_VERSION="${MAJOR_MINOR}.$BUILD_NUMBER"
        
        # Update package.json with new version
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$NEW_VERSION';
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        echo "Version updated from $CURRENT_VERSION to $NEW_VERSION"
        
        # Create version.json
        cat > src/assets/version.json << EOF
        {
          "version": "$NEW_VERSION",
          "buildNumber": "$BUILD_NUMBER",
          "commitHash": "$COMMIT_HASH",
          "commitMessage": "$COMMIT_MESSAGE",
          "buildDate": "$BUILD_DATE",
          "branch": "$BRANCH"
        }
        EOF
        
        echo "Generated version.json:"
        cat src/assets/version.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Note: Build attestations are only available for public repositories
    # - name: Generate artifact attestation
    #   if: github.event_name != 'pull_request'
    #   uses: actions/attest-build-provenance@v1
    #   with:
    #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
    #     subject-digest: ${{ steps.build.outputs.digest }}
    #     push-to-registry: true